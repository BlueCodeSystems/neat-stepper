plugins {
  id 'jacoco'
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
}

jacoco { toolVersion = '0.8.10' }

android {
  namespace 'com.nerdstone.neatandroidstepper.core'
  compileSdk 35
  buildToolsVersion '35.0.0'
  buildFeatures { buildConfig true }

  defaultConfig {
    minSdk 18
    targetSdk 35
    versionCode (project.findProperty('VERSION_CODE')?.toString()?.toInteger() ?: 106)
    versionName (project.findProperty('VERSION_NAME')?.toString() ?: '1.0.6-SNAPSHOT')
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    consumerProguardFiles 'consumer-rules.pro'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }

  lint { abortOnError false }

  buildTypes {
    release { minifyEnabled false; proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' }
    debug   { debuggable true }
  }

  packaging { resources { excludes += [
    'LICENSE.txt', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt',
    'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/INDEX.LIST'
  ] } }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        jvmArgs '-Xmx1024m'
        jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.text=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/java.security=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
        jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
        jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
        jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
        systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        systemProperty 'robolectric.enabledSdks', '28'
      }
    }
  }
}

kotlin {
  jvmToolchain(17)
}

tasks.withType(Test).configureEach {
  jacoco {
    includeNoLocationClasses = true
    excludes = ['jdk.internal.*']
  }
}

dependencies {
  // AndroidX
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.core:core-ktx:1.13.1'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'androidx.viewpager2:viewpager2:1.0.0'

  // Unit test
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.robolectric:robolectric:4.10.3'
  testImplementation 'org.mockito:mockito-core:4.6.1'
  testImplementation 'org.mockito:mockito-inline:4.6.1'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Jacoco report (modern DSL)
tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports {
    xml.required = true; html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
    html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
  }
  def fileFilter = ['**/R.class','**/R$*.class','**/BuildConfig.*','**/Manifest*.*','**/*Test*.*','android/**/*.*','**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}

apply from: '../maven.gradle'
